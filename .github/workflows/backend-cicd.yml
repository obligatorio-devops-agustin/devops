name: Backend CI/CD Workflow

on:
  repository_dispatch:
    types:
      - trigger-backend

jobs:
  build-and-analyze:
    name: Build, Test, and Analyze Microservices
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code from Repo A
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.client_payload.repo }}
          ref: ${{ github.event.client_payload.branch }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build, Test, and Analyze Microservices
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          for service in $(echo "${{ github.event.client_payload.microservices }}" | tr ',' '\n'); do
            echo "Building and testing $service"
            cd $service
            mvn -B clean test
            echo "Running SonarQube analysis for $service"
            mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
              -Dsonar.projectKey=obligatorio-devops-agustin_backend-services_$service \
              -Dsonar.projectBaseDir=$(pwd)
            cd ..
          done

  deploy:
    name: Deploy Microservices
    needs: build-and-analyze
    runs-on: ubuntu-latest
    if: ${{ needs.build-and-analyze.result == 'success' }}

    steps:
      - name: Checkout Code from Repo A
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.client_payload.repo }}
          ref: ${{ github.event.client_payload.branch }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Images
        run: |
          for SERVICE in $(echo "${{ github.event.client_payload.microservices }}" | tr ',' '\n'); do
            # Generar etiqueta con la rama y el commit
            TAG=${{ github.event.client_payload.branch }}-${{ github.event.client_payload.commit }}
            echo "Building and pushing image for $SERVICE with tag $TAG"
            
            # Construir y etiquetar la imagen
            docker build -t ${{ secrets.DOCKER_USERNAME }}/$SERVICE:$TAG $SERVICE
            
            # Subir la imagen etiquetada con la rama y el commit
            docker push ${{ secrets.DOCKER_USERNAME }}/$SERVICE:$TAG
          done
