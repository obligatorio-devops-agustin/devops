name: Backend CI/CD Workflow

on:
  repository_dispatch:
    types:
      - trigger-backend

jobs:
  build-and-analyze:
    name: Build, Test, and Analyze Microservices
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code from Backend Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.client_payload.repo }}
          ref: ${{ github.event.client_payload.branch }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          path: ./backend-repo

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          working-directory: ./backend-repo
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build, Test, and Analyze Microservices
        working-directory: ./backend-repo
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          for service in $(echo "${{ github.event.client_payload.microservices }}" | tr ',' '\n'); do
            echo "Building and testing $service"
            cd $service
            mvn -B clean test
            echo "Running SonarQube analysis for $service"
            mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
              -Dsonar.projectKey=obligatorio-devops-agustin_backend-services_$service \
              -Dsonar.projectBaseDir=$(pwd)
            cd ..
          done

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: backend-code
          path: ./backend-repo
          retention-days: 7

  deploy-iac:
    name: Deploy Infrastructure as Code
    needs: build-and-analyze
    runs-on: ubuntu-latest
    if: ${{ needs.build-and-analyze.result == 'success' }}

    steps:
      - name: Checkout Devops Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ./terraform-repo

      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: backend-code
          path: ./backend-repo

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Run Terraform
        working-directory: ./backend-repo/terraform/backend
        run: |
          terraform init
          terraform workspace select ${{ github.event.client_payload.branch }} || terraform workspace new ${{ github.event.client_payload.branch }}
          terraform apply -auto-approve \
            -var-file=environments/${{ github.event.client_payload.branch }}.tfvars \
            -var="github_sha=${{ github.event.client_payload.commit }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy-images:
    name: Deploy Microservices
    needs: deploy-iac
    runs-on: ubuntu-latest
    if: ${{ needs.deploy-iac.result == 'success' }}

    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: backend-code
          path: ./backend-repo

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Images
        working-directory: ./backend-repo
        run: |
          for SERVICE in $(echo "${{ github.event.client_payload.microservices }}" | tr ',' '\n'); do
            TAG=${{ github.event.client_payload.branch }}-${{ github.event.client_payload.commit }}
            echo "Building and pushing image for $SERVICE with tag $TAG"
            
            docker build -t ${{ secrets.DOCKER_USERNAME }}/$SERVICE:$TAG ./backend-repo/$SERVICE
            docker push ${{ secrets.DOCKER_USERNAME }}/$SERVICE:$TAG
          done
